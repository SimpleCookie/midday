{"version":3,"sources":["countdown/index.tsx","countdown/Countdown.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Countdown","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getTimeLeft","midday","now","Moment","hour","add","hours","diff","duration","setState","Math","floor","asHours","minutes","ceil","asMinutes","isItMidday","state","setInterval","react_default","a","createElement","style","color","fontWeight","_this$state","className","Component","countdown","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAEeA,cCOb,SAAAC,EAAYC,GAAW,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACrBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYRQ,YAAc,WACZ,IACIC,EADEC,EAAMC,MAGVF,EADEC,EAAIE,OAAS,GACNF,EAAIG,IAAI,OAAQ,GAAKH,EAAIE,QAAQE,MAAM,IAEvCH,MAASG,MAAM,IAE1B,IAAMC,EAAOJ,IAAOK,SAASP,EAAOM,KAAKJ,QACzCV,EAAKgB,SAAS,CACZH,MAAOI,KAAKC,MAAMJ,EAAKK,WACvBC,QAASH,KAAKI,KAAKP,EAAKQ,YAAc,OAxBnBtB,EA4BvBuB,WAAa,WACX,IAAMd,EAAMC,MAASC,OACrB,OAAOF,GAAO,IAAMA,EAAM,IA5B1BT,EAAKwB,MAAQ,CACXX,MAAO,EACPO,QAAS,GAJUpB,mFASrBG,KAAKI,cACLkB,YAAYtB,KAAKI,YAAa,sCAuB9B,GAAIJ,KAAKoB,aACP,OACEG,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAAEC,MAAO,QAASC,WAAY,SAAzC,wBAHG,IAAAC,EAQoB7B,KAAKqB,MAAxBX,EARDmB,EAQCnB,MAAOO,EARRY,EAQQZ,QACf,OACEM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGK,UAAU,yBAAb,OACAP,EAAAC,EAAAC,cAAA,KAAGK,UAAU,aAAb,OACAP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aAAf,aACUpB,EADV,eAC6BO,EAD7B,yBA9CUc,aCWHpC,0LAXX,OACE4B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,cAChBP,EAAAC,EAAAC,cAAA,gCAEFF,EAAAC,EAAAC,cAACO,EAAD,cAPUD,cCMEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.485e4347.chunk.js","sourcesContent":["import Countdown from \"./Countdown\";\n\nexport default Countdown;\n","import React, { Component } from \"react\";\nimport Moment from \"moment\";\n\ninterface State {\n  hours: number;\n  minutes: number;\n}\n\nclass App extends Component<{}, State> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      hours: 0,\n      minutes: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getTimeLeft();\n    setInterval(this.getTimeLeft, 5000);\n  }\n\n  getTimeLeft = () => {\n    const now = Moment();\n    let midday;\n    if (now.hour() > 15) {\n      midday = now.add(\"hour\", 25 - now.hour()).hours(12);\n    } else {\n      midday = Moment().hours(12);\n    }\n    const diff = Moment.duration(midday.diff(Moment()));\n    this.setState({\n      hours: Math.floor(diff.asHours()),\n      minutes: Math.ceil(diff.asMinutes() / 60)\n    });\n  };\n\n  isItMidday = () => {\n    const now = Moment().hour();\n    return now >= 12 && now < 15;\n  };\n  render() {\n    if (this.isItMidday()) {\n      return (\n        <h2 style={{ color: \"green\", fontWeight: \"bold\" }}>\n          Ja det är middag!\n        </h2>\n      );\n    }\n    const { hours, minutes } = this.state;\n    return (\n      <div>\n        <p className=\"no-midday no-midday-2\">Nej</p>\n        <p className=\"no-midday\">Nej</p>\n        <div className=\"countdown\">\n          Det är {hours} timmar och {minutes} minuter kvar\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport Countdown from \"./countdown\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Är det middag?</h1>\n        </header>\n        <Countdown />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}